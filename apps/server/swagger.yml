openapi: 3.0.0
info:
  title: Shopper Ave API
  description: Shopper Ave - An E-Commerce API with MERN stack
  version: 1.0.0

servers:
  - url: "{protocol}://localhost:4000/api/{version}"
    description: Local Development version
    variables:
      version:
        enum:
          - v1
          # - v2
        default: v1
      protocol:
        enum:
          - http
          - https
        default: http
  # - url: https://example.com/api/v1
  #   description: Main (Production) server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
  # User schema
    User:
      properties:
        _id:
          type: string # MongoDB internal
          default: <MongoDB ObjectId>
        __v:
          type: integer # Mongoose internal
          default: 0
        name:
          type: string
          default: John Doe
        email:
          type: string
          default: john@example.com
        password:
          type: string
          default: ðŸ¤¨
        role:
          type: string
          oneOf:
            - 'user'
            - 'manager'
            - 'admin'
        photo:
          type: object
          properties:
            id:
              type: string
              default: <Image UID>
            secure_url:
              type: string
              default: Photo URL
        forgotPasswordToken: 
          type: string
        forgotPasswordExpiry: 
          type: string
        createdAt:
          type: string
          default:  2022-09-26T05:53:07.739Z
        updatedAt:
          type: string
          default: 2022-09-26T05:53:07.739Z
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              err:
                type: string
    Unauthorized:
      description: Unauthorized
      content:
          application/json:
            schema:
              type: object
              properties:
                err:
                  type: string
                  default: You're unauthorized to access this page
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              err:
                type: string
                default: Something went wrong

tags:
  - name: Welcome
    description: Welcome Route
  - name: Auth
    description: Authentication Routes
  - name: User
    description: User Routes
  - name: Admin
    description: Admin Routes
  - name: Manager
    description: Read only admin with some filteration

paths:
  /:
    get:
      tags:
        - Welcome
      summary: Check API is working
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: Welcome to the Shopper Ave API
        '500':
           $ref: '#/components/schemas/InternalServerError'
  /signup:
    post:
      tags:
        - Auth
      summary: Creates new user and returns the token and user information
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: John Doe
                email:
                  type: string
                  default: john@example.com
                password:
                  type: string
                  default: john@123
                photo:
                  type: string
                  format: binary
              required:
                - name
                - email
                - password
      responses:
        '201': 
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  token:
                    type: string
                    default: <token>
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: Name, email and password are required # Ignored
        '500':
           $ref: '#/components/schemas/InternalServerError'
  /login:
    post:
      tags:
        - Auth
      summary: Login user and returns the token and user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  default: john@example.com
                password:
                  type: string
                  default: john@123
              required:
                - email
                - password
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  token:
                    type: string
                    default: <token>
                  user:
                    $ref: "#/components/schemas/User"
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: Email and password are required # Ignored
        '500':
           $ref: '#/components/schemas/InternalServerError'
  /logout:
    get:
      tags:
        - Auth
      summary: Logout user and returns success message
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: Logout success
        '500':
           $ref: '#/components/schemas/InternalServerError'
  /forgotpassword:
    post:
      tags:
        - Auth
      summary: Send a password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  default: john@example.com
                  required: true
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: Email sent successfully   
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: User not found # Ignored
        '500':
           $ref: '#/components/schemas/InternalServerError'
  /password/reset/{token}:
    post:
      tags:
        - Auth
      summary: Reset password for user who generated token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  default: john@1234
                  required: true
                confirmPassword:
                  type: string
                  default: john@example.com
                  required: true
      responses:
        '201': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  token:
                    type: string
                    default: <token>
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: Token is either invalid or expired # Ignored
        '500':
           $ref: '#/components/schemas/InternalServerError'
  /dashboard:
    get:
      tags:
        - User
      summary: Get user details
      parameters:
        - in: header
          name: auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/schemas/InternalServerError'
  /password/update:
    post:
      tags:
        - User
      summary: Change user password
      parameters:
        - in: header
          name: auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  default: john@123
                newPassword:
                  type: string
                  default: john@124
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  token:
                    type: string
                    default: <token>
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: Old password is incorrect # Ignored
          default2: Both old and new password is required to update password # Ignored
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/schemas/InternalServerError'
  /dashboard/update:
    post:
      tags:
        - User
      summary: Update user profile details
      parameters:
        - in: header
          name: auth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  default: John Doe Sr
                email:
                  type: string
                  default: john@gmail.com
                photo:
                  type: string
                  format: binary
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: No data provided to update # Ignored
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/schemas/InternalServerError'
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      parameters:
        - in: header
          name: auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  users:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/schemas/InternalServerError'
  /admin/user/{userId}:
    get:
      tags:
        - Admin
      summary: Get a single user
      parameters:
        - in: header
          name: auth
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: User ID is required to get the user # Ignored
          default2: User not found # Ignored
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/schemas/InternalServerError'
    put:
      tags:
        - Admin
      summary: Update user details
      parameters:
        - in: header
          name: auth
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Sam Smith
                email:
                  type: string
                  default: sam@example.com
                role:
                  type: string
                  enum: [user, admin, manager]
                photo:
                  type: string
                  format: binary
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: User ID is required to update user # Ignored
          default2: Atleast one property (name, email, photo or role) is required to update data # Ignored
          default3: No user found with this ID # Ignored
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/schemas/InternalServerError'
    delete:
      tags:
        - Admin
      summary: Delete user
      parameters:
        - in: header
          name: auth
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: '#/components/schemas/BadRequest'
          default: User ID is requried to delete a user # Ignored
          default2: No such user found # Ignored
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/schemas/InternalServerError'
  /manager/users:
    get:
      tags:
        - Manager
      summary: Get all users with user role
      parameters:
        - in: header
          name: auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  users:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '500':
          $ref: '#/components/schemas/InternalServerError'
